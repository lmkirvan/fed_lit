---
title: "judges"
format: html
editor: visual
---

```{r setup}

get_judges <- function(letter_url){
  
  rvest::read_html(letter_url) |> 
    rvest::html_element(
      css = "body > div.l-page > div > div > div > div.view-content") |> 
    rvest::html_elements("a") |> 
    rvest::html_attrs() -> judge_stems
  
  paste0("https://www.fjc.gov", judge_stems)
}

get_text <- function(url){ 
  
  print(url)
  Sys.sleep(.1)
  url |> 
    rvest::read_html() |> 
    rvest::html_element(css = "body > div.l-page > div > div > div > div") |> 
    rvest::html_text2()
  }

# helper function need to look at if this impacts speed 
start_of_match <- function(string, pattern){
  stringr::str_locate(string, pattern)[ , 1]
  }
  
# function to get the first part of a string based on a match
str_cut_after <- function(string, pattern){
  location <- start_of_match(string, pattern ) 
  location[is.na(location)] <- nchar(string)[is.na(location)]
  stringr::str_sub( string, start = 0, end = location)
}

# using a function factor here so that I can avoid editing this so much while
# testing. these are nice for interactive use!
ff <- function(key_words, rest = ".*?[0-9]{4}[:punct:]" ){
  patterns <-glue::glue(
    "({{key_words}}{{rest}})"
    , key_words = key_words
    , group_name = group_name
    , rest = rest
    , .open = "{{"
    , .close = "}}"
    )
  purrr::partial(stringr::str_extract_all, pattern = patterns)
}

```

Trying to get a data-set of which judges are in each district court on each day.

Each judge has his own page with a structured paragraph. Detailing service.

we need:

-   appointments (sometimes more than one)

    -   date of start, date of senior status, date of termination

-   president (can vary by appointment)

-   court (can vary by appointment)

```{r}

# base url with pages for each letter:
url <- "https://www.fjc.gov/history/judges/search/glossary-search/"

letters <- letters
urls <- paste0(url, letters)

# use the get_judges function to get the list of links for all the judges
judge_urls <- purrr::map(urls, get_judges) |>  purrr::list_c()
judge_names <- stringr::str_remove(
  judge_urls
  , "https://www.fjc.gov/history/judges/"
  )

# these are last, first second etc. 
judge_names <- stringr::str_split(judge_names, "-")

# get it all
get_text_safely <- purrr::safely(get_text, otherwise = NA)

#this takes a bit. may need to do it safely
texts_results <- purrr:::map(judge_urls, get_text_safely)

texts <- purrr::map_chr(texts_results, "result")
save(texts, file = "texts.Rdata")

```

```{r}

load("texts.Rdata")

texts |> 
  str_cut_after("Education") |> 
  str_cut_after("Supreme Court Oath:") |> 
  str_cut_after("Other Federal Judicial Service:") |> 
  str_cut_after("Professional Career")-> short_texts

#this gets the dates for various court changes 
get_dates <- ff(c("[nN]ominated"
                  , "[cC]ommission"
                  , "[sS]tatus"
                  , "[:space:][Aa]ssigned"
                  , "[Rr]eassigned"
                  , "[tT]erminated")
                )

dates <- purrr::map(short_texts, get_dates)

## court names 
get_courts <- ff(c("Justice", "Judge", "not confirmed"), rest = ".*?\n") 
courts <- purrr::map(short_texts, get_courts)


# This kinda works
get_dates_df <- function(list){ 
  
  list[c(2,4,5)] |> 
    purrr::reduce(c) |> 
    purrr::map(dplyr::as_tibble) |> 
    purrr::reduce(dplyr::bind_rows) |> 
    tidyr::separate_wider_delim(
      value
      , delim = " on "   
      , names = c("action", "date")
      ) 
}

safely_get_dates_df <- purrr::safely(get_dates_df, NA)
dates_df <- purrr::map(dates, safely_get_dates_df)

errors <- purrr::map(dates_df, "error") |> purrr::discard(is.null)
results <- purrr::map(dates_df, "result") |> purrr::discard( \(x) any(is.na(x))) 

purrr::imap(results, .f =  \(x, idx){
  x |> 
    dplyr::mutate(id = idx)
}) -> results

results <- dplyr::bind_rows(results)

# these could both  local to the get courts thing if needed, but I feel like i
# might reuse this patter for getting judge names 

get_layer  <- function(list, comb = c(1,2), layer){
  list[comb] |>
    purrr::map(layer)
}

handle_confirmation <- function(list, n_discomf){
  if(rlang::is_empty(list[[3]])){
    list
  } else {
    get_layer(list, layer = n_discomf + 1)
    }
  } 

# this works except for the not confirmed people. need to handle how to drop
# them then drop them off actually need the dates to do this perfectly but I
# don't think it matters because no judge has ever failed to be nominated to a
# lower court before going on to be added to the surpremes
get_court_df <- function(list){
  
  n_not_confirmed <- length(list[[3]])
  
  list |>    
    handle_confirmation(n_discomf = n_not_confirmed) |> 
    purrr::reduce(c) |>
    purrr::map(dplyr::as_tibble) |> 
    purrr::reduce(dplyr::bind_rows) |> 
    tidyr::separate_wider_delim(
      value
      , delim = ","   
      , names = c("title", "court")
      , too_many = "merge"
    ) 
  }


# putting aside the tough edge cases from above for now. 23 out of 4000 is okay,
# but will fix soon.
select <- map_lgl(dates_df |>  map("error"), is.null)
courts <- courts[which(select)]

courts_df <- purrr::map(courts, get_court_df)


```

some stuff do to do:

-   split into date and non date part
-   function that takes court list and date lists and does a join of some kind

Modeling questions

do we want to have groups for each set of unique judges in a district. That could be done by just concatenating their names together?

We want to look at a couple of things

-   how long it takes for cases to get resolved over time
-   how filing behavior changes as judges get added
-   how different groups of appointees--most importantly grouped appointing president change flows into different courts
    -   do they change the mix of lawsuits brought to each court (interaction with nature of suit?)
    -   do they change the pace of filings
    -   do they change which kinds of parties are filing

```{r}
#get dates in order


#need to fix the manuscript collections and bibliography

```
